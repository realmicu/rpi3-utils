.TH sensorproxy "8" "May 2017" "raspik-utils" "Raspik Utilities by Micu"
.SH NAME
sensorproxy - environment sensor data collector and server
.SH SYNOPSIS
.B sensorproxy
[
.BI "\-i " i2cinterval
] [
.BI "\-u " username
] [
.B \-d
|
.BI "\-l " logfile
] [
.BI "\-P " pidfile
] [
.BI "\-r " radioip
[
.BI "\-p " radioport
] ] [
.I address
[
.I port
] ]
.PP
.B sensorproxy \-V
.SH DESCRIPTION
This utility collect environmental sensor data (such as temperature, humidity,
pressure etc) and presents it in text format that is descriptive and easy to parse.
Data is collected from two independent sources: devices locally connected to I2C bus
and remote (radio) sensors reported by \fBradio433daemon\fR server.
.PP
Program opens TCP port and listens for clients. Each client that connects to this socket
is immediately updated with latest sensor data then disconnected automatically.
.PP
When connected to \fBradio433daemon\fR, \fBsensorproxy\fR consolidates repeated signals
and decodes data. It automatically drops radio sensors that
become silent and discover new ones. I2C devices are permanently removed from data sources
when they become unavailable. All sensor data is validated against datasheet values.
\fBsensorproxy\fR also stores minimum and maximum values for environmental data
and includes them in message.
.SH MESSAGE FORMAT
When contacted, server sends in response following text message organized in tree-like
structure:
.PP
#INFO:
.I server header
.br
#BEGIN
.br
.I /bus0/device0/attribute0=value
.br
.I /bus0/device0/attribute1=value
.br
[...]
.br
.I /busX/deviceY/attributeZ=value
.br
#END
.TP
.BI #INFO: " server header"
informational message,
.I server header
contains program description (version, build etc)
.TP
.B #BEGIN
mandatory string that marks beginning of sensor data
.TP
.B /bus/device/attribute=value
line of text carrying one attribute of sensor; \fBbus\fR is \fIi2c\fR or \fIradio\fR,
\fBdevice\fR consists of name and ID/address of sensor and \fBattribute\fR
describes specific type of data returned by sensor; see \fIEXAMPLES\fR below
.br
.I Note:
Each sensor data message starts with \fItimestamp\fR attribute followed by \fIinterval\fR
and ends with \fIindex\fR (these are mandatory)
.TP
.B #END
end of message
.SH SUPPORTED SENSORS
Program recognizes following environmental sensors:
.TP
Connected to I2C bus:
.I bh1750
- light level sensor
.br
.I bmp180
- pressure and temperature sensor
.br
.I htu21d
- humidity and temperature sensor
.TP
Remote (available via \fBradio433daemon\fR):
.I hyuws77th
- wireless outdoor temperature and humidity sensor Hyundai WS Senzor 77TH
and compatible
.SH EXAMPLES
Example message for \fIbmp180\fR pressure and temperature sensor:
.PP
/i2c/bmp180@1,77/timestamp=1516030525.898
.br
/i2c/bmp180@1,77/interval=4000
.br
/i2c/bmp180@1,77/press/min=999.5
.br
/i2c/bmp180@1,77/press/cur=1009.6
.br
/i2c/bmp180@1,77/press/max=1023.4
.br
/i2c/bmp180@1,77/press/unit=hPa
.br
/i2c/bmp180@1,77/temp/min=+18.4
.br
/i2c/bmp180@1,77/temp/cur=+20.5
.br
/i2c/bmp180@1,77/temp/max=+21.7
.br
/i2c/bmp180@1,77/temp/unit=C
.br
/i2c/bmp180@1,77/index=1
.PP
Above data shows \fIbmp180\fR sensor connected to I2C bus 1 at address 0x77; measurement
has been taken at time 1516030525.898 (seconds since Epoch), sampling interval (defined in
command line, see \fIOPTIONS\fR below) is set to 4 seconds (4000 ms); current pressure
(in unit=hPa) is 1009.6, recorded minimum was 999.5 and maximum 1023.4; similar data
is provided for temperature (please note signed values); sensor index is 1 so this is
a second one (numbers start with 0).
.PP
Another example, radio sensor this time:
.PP
/radio/hyuws77th@2,00:02/timestamp=1516030501.771
.br
/radio/hyuws77th@2,00:02/interval=33000
.br
/radio/hyuws77th@2,00:02/code=0x00000000A0ABF072
.br
/radio/hyuws77th@2,00:02/signal/cur=3
.br
/radio/hyuws77th@2,00:02/signal/max=4
.br
/radio/hyuws77th@2,00:02/batlow=0
.br
/radio/hyuws77th@2,00:02/temp/min=-5.0
.br
/radio/hyuws77th@2,00:02/temp/cur=-4.3
.br
/radio/hyuws77th@2,00:02/temp/max=+0.8
.br
/radio/hyuws77th@2,00:02/temp/unit=C
.br
/radio/hyuws77th@2,00:02/temp/trend=_
.br
/radio/hyuws77th@2,00:02/humid/min=60
.br
/radio/hyuws77th@2,00:02/humid/cur=68
.br
/radio/hyuws77th@2,00:02/humid/max=81
.br
/radio/hyuws77th@2,00:02/humid/unit=%
.br
/radio/hyuws77th@2,00:02/index=3
.PP
This data shows \fIHyundai WS Senzor 77TH\fR on channel 2 (set by hardware switch on device);
volatile (software-assigned) UUID is 0x00:0x02, this gets regenerated every time device is power-cycled
(for example during battery replacement);
sensor is expected to transmit data every 33 seconds; raw code received is 0x00000000A0ABF072;
in addition to temperature and humidity, device monitors temperature trend (marked as '/' for upward, '\\' for downward
and '_' for stable) and battery level (batlow=1 indicates when low on power); program also helps to
calculate signal strength by providing two values: maximum is number of packet repeats per transmission
(hardcoded in device) and current value informs how many such packets were received without errors for last transmission
(3 out of 4 in this case).
.SH OPTIONS
.TP
.B \-V
print version and exit
.TP
.BI "\-i" " i2cinterval"
sampling interval of I2C devices in seconds (if not specified,
skip I2C access)
.TP
.BI "\-u" " username"
(optional) name of the user to switch to after initialization,
instructs program to drop super-user privileges permanently
(however \fBsensorproxy\fR does not require to be run by root)
.TP
.B "\-d"
(optional) debug mode, stay foreground and print activity on stdout
.TP
.BI "\-l" " logfile"
(optional) path to log file (default is none - nothing is logged)
.TP
.BI "\-P" " pidfile"
(optional) path to PID file (default is /var/run/sensorproxy.pid)
.TP
.BI "\-r" " radioip"
IPv4 address of \fBradio433daemon\fR server (if not specified,
do not contact daemon)
.TP
.BI "\-p" " radioport"
(optional) TCP port of \fBradio433daemon\fR server (default is 5433)
.TP
.B address
(optional) IPv4 address to listen on (default is any, 0.0.0.0)
.TP
.B port
(optional) TCP port to listen on (default is 5444)
.TP
.I Note:
Please specify at least one sensor data source using \fB\-i\fR or \fB\-r\fR
parameters, otherwise program will refuse to run for obvious reason.
.SH SIGNALS
SIGHUP signal instructs program to truncate and reopen its log file, which is
useful during log rotation (for example by \fBlogrotate\fR utility).
.PP
SIGUSR1 sets minimum and maximum values for all sensors to current ones.
.PP
SIGUSR2 deletes all radio sensors from monitoring and initiates re-discover
- if connected to \fBradio433daemon\fR. Use to quickly get rid of stale remote sensors.
.SH BUGS
None so far.
.SH SEE ALSO
.BR power433control "(1), " radio433client "(1), " radiodump "(1), " radio433daemon "(8), " buttonhandler "(8) "
.SH AUTHOR
Michal "Micu" Cieslakiewicz <michal.cieslakiewicz@wp.pl>
